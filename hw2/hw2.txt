1.

2. No, an attacker could have obtained access to Alice's secret signing
   key using some means (e.g. gotten physical access to Alice's machine,
   sniffed a network connection when Alice accidentally sent her key in the
   clear, etc.), and then said attacker could have signed the message 
   that Bob received with Alice's key.

3. Since DES has a key length of 56 bits, we can assume that, on average,
   that it will take 2^28 decryptions to find our desired key.
   (Why?) Thus, on a processor that takes 2^(-26) seconds to perform a
   single DES decryption, it will take (2^(-26) seconds/decryption) * 
   (2^56 decryptions) approx 2.98E5 hours. On a collection of 2^14
   processors, assuming that each processor is working at full capacity,
   that number drops to approximately 18.2 hours.

4. message: 7e 98 54 5e 43 c1 b8 b0 40 1e b8 4e a0 77 78 50

5. C1' = C2
   -> C1' = blkcph(C0' ⊕ P1')
   -> C2  = blkcph(C1  ⊕ P2 )
   -> blkcph(C0' ⊕ P1') = blkcph(C1 ⊕ P2)
   -> C0' ⊕ P1' = C1 ⊕ P2
   -> P1' = C1 ⊕ P2 ⊕ C0'

6. Since we have the P, and we know that both C and C' were generated using
   the same nonces, then we can recover the encrypted nonce + counter values
   and thus recover P'. We can do this by XORing each block of P with its
   corresponding block in C. This gives an ordered set of all the encrypted 
   nonce + counter values; call this set N. Then, we can XOR each item in
   N with its corresponding block in C'. Due to the properties of XOR 
   (A XOR B = C -> C XOR B = A), we thus recover each block in P'.

8. (code)

9. M(A) = blkcph(A)
   M(B) = blkcph(B)
   M(A||B) = blkcph(blkcph(A) ⊕ B)
   M(B||(M(B) ⊕ M(A) ⊕ B)) = blkcph(blkcph(B) ⊕ blkcph(B) ⊕ blkcph(A) ⊕ B) 
                           = blkcph(blkcph(A) ⊕ B)
                           = M(A||B)

